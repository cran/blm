EO(fit)
EO(fit, ccdata$strata)
EO <- function(object, index=NULL,alpha=.05){#
	if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
	if(is.null(index)) index <- rep("Overall", length(object@y))#
	p <- predict(object)#
	O <- tapply(object@y, index, sum)#
	E <- tapply(p*object@weights, index, sum)#
	 z <- qnorm(1-alpha/2)#
	 lower <- E/O*exp(-z*sqrt(1/O))#
     upper <- E/O*exp(+z*sqrt(1/O))#
  	results <- cbind(E, O, E/O, lower, upper)#
  	names(results) <- c("Exp.", "Obs.", "Exp./Obs.","lowerCI","upperCI")#
results#
}
EO <- function(object, index=NULL,level=.95){#
	if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
	if(is.null(index)) index <- rep("Overall", length(object@y))#
	p <- predict(object)#
	O <- tapply(object@y, index, sum)#
	E <- tapply(p*object@weights, index, sum)#
	 z <- qnorm(1-(1-level)/2)#
	 lower <- E/O*exp(-z*sqrt(1/O))#
     upper <- E/O*exp(+z*sqrt(1/O))#
  	results <- cbind(E, O, E/O, lower, upper)#
  	names(results) <- c("Exp.", "Obs.", "Exp./Obs.","lowerCI","upperCI")#
results#
}
EO(fit)
EO <- function(object, index=NULL,level=.95){#
	if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
	if(is.null(index)) index <- rep("Overall", length(object@y))#
	p <- predict(object)#
	O <- tapply(object@y, index, sum)#
	E <- tapply(p*object@weights, index, sum)#
	 z <- qnorm(1-(1-level)/2)#
	 lower <- E/O*exp(-z*sqrt(1/O))#
     upper <- E/O*exp(+z*sqrt(1/O))#
  	results <- data.frame(#
  					E = E, #
  					O = O, #
  					EtoO = E/O,#
  				    lowerCI = lower, #
  				    upperCI = upper)#
results#
}
EO(fit)
EO(fit, ccdata$strata) # BY FACTOR
getSlots("blm")
head(fit@which.kept)
?constrOptim
data.path <- "~/master/project/thyroid/data/revision/data"#
load(file.path(data.path,"ccss.eligible.5.RData")) # 5-year survivors
ccss$after1970 <- ccss$birth.year>=1970#
ccss$adx.15less <- ccss$a_dx<15#
#
ccss$cancer.nodules <- ifelse(!is.na(ccss$A_ThyNod.merged)&ccss$sptc==1&#
                              (ccss$event.age-ccss$A_ThyNod.merged)<cutoff,1,0)#
ccss$THYNOD.age <- ifelse(!is.na(ccss$A_ThyNod.merged)&#
          					                ccss$cancer.nodules==0,ccss$A_ThyNod.merged,NA)#
#
ccss.nodule <- data.frame.time.dependent(ccss$id,ccss$a_dx+5,ccss$event.age,#
								       ccss$sptc,covariate.name="nodule",#
									ccss$THYNOD.age,ccss)#
#
ccss$neck <- ifelse(!is.na(ccss$neck)&ccss$neck=="Yes",1,0)#
#
ccss <- merge(ccss,ccss.nodule)
cutoff <- 1
library(sptc)
data.path <- "~/master/project/thyroid/data/revision/data"#
load(file.path(data.path,"ccss.eligible.5.RData")) # 5-year survivors
ccss$after1970 <- ccss$birth.year>=1970#
ccss$adx.15less <- ccss$a_dx<15#
#
ccss$cancer.nodules <- ifelse(!is.na(ccss$A_ThyNod.merged)&ccss$sptc==1&#
                              (ccss$event.age-ccss$A_ThyNod.merged)<cutoff,1,0)#
ccss$THYNOD.age <- ifelse(!is.na(ccss$A_ThyNod.merged)&#
          					                ccss$cancer.nodules==0,ccss$A_ThyNod.merged,NA)#
#
ccss.nodule <- data.frame.time.dependent(ccss$id,ccss$a_dx+5,ccss$event.age,#
								       ccss$sptc,covariate.name="nodule",#
									ccss$THYNOD.age,ccss)#
#
ccss$neck <- ifelse(!is.na(ccss$neck)&ccss$neck=="Yes",1,0)#
#
ccss <- merge(ccss,ccss.nodule)
working.variables
model.variables
model.variables <- c(model.variables[-length(model.variables)],"after1970","adx.15less","time.dep.group","event","start","stop")
ccss <- subset(ccss, select=model.variables)
write(ccss,file="~/master/project/thyroid/data/revision/ccss.csv",row.names=FALSE)
write.table(ccss,file="~/master/project/thyroid/data/revision/ccss.csv",row.names=FALSE)
ccss$event.age <- NULL
names(ccss)
names(ccss)[14]
names(ccss)[14] <- "nodule"
ccss[sample(1:5),]
ccss[sample(nrow(ccss),5),]
write.table(ccss,file="~/master/project/thyroid/data/revision/ccss.csv",row.names=FALSE)
summary(p)
p <- predict(fit)
summary(p)
constrOptim
example(constrOptim)
hQP <- function(b) {sum(c(0,5,0)*b)-0.5*sum(b*b)}
f <- function(x) x^2
optim(x,f)
optim(1,f)
optimize(1,f)
?optim
fr <- function(x) {   ## Rosenbrock Banana function#
    x1 <- x[1]#
    x2 <- x[2]#
    100 * (x2 - x1 * x1)^2 + (1 - x1)^2#
}#
grr <- function(x) { ## Gradient of 'fr'#
    x1 <- x[1]#
    x2 <- x[2]#
    c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),#
       200 *      (x2 - x1 * x1))#
}#
optim(c(-1.2,1), fr)
?constrOptim
constrOptim(c(-1.2,0.9), fr, grr, ui=rbind(c(-1,0),c(0,-1)), ci=c(-1,-1))
constrOptim(c(-1.2,0.9), fr, grr, ui=rbind(c(-1,0),c(0,-1)), ci=c(-.5,-.5))
constrOptim(c(-1.2,0.9), fr, grr, ui=rbind(c(-1,0),c(0,-1)), ci=c(-1.5,-1.5))
constrOptim(c(-1.2,0.9), fr, grr, ui=rbind(c(-1,0),c(0,-1)), ci=c(-2,-2))
?constrOptim
library(blm)
example(blm)
q("no")
library(blm)
example(blm)
example(lexpit)
library(blm)
example(blm)
example(lexpit)
fit@barrier.value
fit@loglik.null
fit@par.init
example(blm)
fit@par.init
fit@loglik.null
fit@barrier.value
which.constrained(fit)
Rsquared(fit)
EO(fit)
fit$loglik
fit@loglik
IDENTIFY CONSTRAINTS FOR A GIVEN CRITERION#
which.constrained <- function(object, criterion = 1e-6){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
if(any(predict(object)<=criterion|predict(object)>=1-criterion)){#
	which <- which(predict(object)<=criterion|predict(object)>=1-criterion)#
	model.matric(object@formula,object@data)[which,]#
}#
else{#
	NA#
}#
}
which.constrained(fit)
IDENTIFY CONSTRAINTS FOR A GIVEN CRITERION#
which.constrained <- function(object, criterion = 1e-6){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
if(any(predict(object)<=criterion|predict(object)>=1-criterion)){#
	which <- which(predict(object)<=criterion|predict(object)>=1-criterion)#
	model.matrix(object@formula,object@data)[which,]#
}#
else{#
	cat("No active constraints using the given criterion.")#
	invisible(NA)#
}#
}
which.constrained(fit)
which.constrained(fit,crit=.1)
which.constrained(fit,crit=.0001)
head(euro2k)
library(sptc)#
data.path <- "~/master/project/thyroid/data/revision/data"#
load(file.path(data.path,"ccss.eligible.5.RData")) # 5-year survivors#
load(file.path(data.path,"euro2k.eligible.RData"))
head(euro2k)
summary(euro2k$event.age-euro2k$entry.age)
args(which.at.boundary)
args(which.constrained)
fit.lexpit <- lexpit(y~female,y~packyear,data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)#
#
summary(fit)
EO(fit)
EO(fit.lexpit)
library(sptc)#
data.path <- "~/master/project/thyroid/data/revision/data"#
load(file.path(data.path,"ccss.eligible.5.RData")) # 5-year survivors#
load(file.path(data.path,"lesg.nordic.RData"))#
#
cutoff <- 1#
#
ccss$after1970 <- ccss$birth.year>=1970#
ccss$adx.15less <- ccss$a_dx<15#
#
ccss$cancer.nodules <- ifelse(!is.na(ccss$A_ThyNod.merged)&ccss$sptc==1&#
                              (ccss$event.age-ccss$A_ThyNod.merged)<cutoff,1,0)#
ccss$THYNOD.age <- ifelse(!is.na(ccss$A_ThyNod.merged)&#
          					                ccss$cancer.nodules==0,ccss$A_ThyNod.merged,NA)#
#
ccss.nodule <- data.frame.time.dependent(ccss$id,ccss$a_dx+5,ccss$event.age,#
								       ccss$sptc,covariate.name="nodule",#
								    	ccss$THYNOD.age,ccss)#
#
ccss$neck <- ifelse(!is.na(ccss$neck)&ccss$neck=="Yes",1,0)#
#
ccss <- merge(ccss,ccss.nodule)#
#
lesg.nordic$after1970 <- lesg.nordic$birth.year<1970#
lesg.nordic$adx.15less <- lesg.nordic$a_dx<15#
lesg.nordic$kidney <- ifelse(lesg.nordic$DIAGNOSE=="Wilms",1,0)#
lesg.nordic$hd <- ifelse(lesg.nordic$DIAGNOSE=="HD",1,0)#
ccss$age5to10 <- ifelse(ccss$a_dx>=5&ccss$a_dx<10,1,0)#
ccss$age10to15 <- ifelse(ccss$a_dx>=10&ccss$a_dx<15,1,0)	#
ccss$ageover15 <- ifelse(ccss$a_dx>=15,1,0)#
#
lesg.nordic$age5to10 <- ifelse(lesg.nordic$a_dx>=5&lesg.nordic$a_dx<10,1,0)#
lesg.nordic$age10to15 <- ifelse(lesg.nordic$a_dx>=10&lesg.nordic$a_dx<15,1,0)#
lesg.nordic$ageover15 <- ifelse(lesg.nordic$a_dx>=15,1,0)#
f.cc =  sptc~female+a_dx+hd+adx.15less+factor(study)#
f.ch = Surv(start,stop,event)~.+after1970+time.dep.group-a_dx-factor(study)#
f <- update(f.cc,f.ch)#
#
chfit <- coxph(f, data=ccss)#
cbind(exp(coef(chfit)), exp(confint(chfit)))
f.cc =  sptc~female+hd+adx.15less+factor(study)#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
f.cc =  sptc~female+hd+adx.15less#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
f.cc =  sptc~female+hd+adx.15less+factor(study)#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
f.cc =  sptc~female+a_dx+alkagent+anyrad+adx.15less+factor(study)#
f.ch = Surv(start,stop,event)~.+anyrad:neck+after1970+time.dep.group-a_dx-factor(study)#
f <- update(f.cc, f.ch)#
chfit <- coxph(f, data=ccss)#
cbind(exp(coef(chfit)), exp(confint(chfit)))
f.cc =  sptc~female+hd+alkagent+anyrad+adx.15less+factor(study)#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
f.cc =  sptc~female+alkagent+anyrad+adx.15less+factor(study)#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
save(lesg.nordic,file=)
write.table(lesg.nordic, file="~/master/project/thyroid/data/revision/lesg_nordic.csv",row.names=FALSE)
f.cc =  sptc~female+a_dx+hd+alkagent+anyrad+adx.15less+factor(study)#
ccfit <- glm(f.cc, family="binomial", data=lesg.nordic)#
cbind(exp(coef(ccfit)),exp(confint(ccfit)))
2*6
1.4*7
temp <- c(4,5,6,1,2,3)
deciles <- sort(rep(1:2,length=temp))
deciles <- sort(rep(1:2,length=length(temp)))
deciles
deciles[order(temp)]
fit@weight[1:10]
fit@weights[1:10]
gof <- function(object,groups=10){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
#
  Y <- object@y#
  prediction <- predict(object)#
  o <- order(prediction)#
  deciles <- sort(rep(1:groups,length=length(Y)))#
  deciles <- deciles[o]#
  #OBSERVED AND EXPTECTED#
  N <- tapply(Y*object@weights,deciles,length)#
  O <- tapply(Y,deciles,sum)#
  E <- tapply(prediction*object@weights,deciles, sum)#
  pi <- E/N#
  num <- (O-N*pi)^2#
  denom <- N*pi*(1-pi)#
#
  sum(num/denom)#
#
  chisq = sum(num/denom)#
#
  P = 1 - pchisq(chisq, groups - 2)#
#
  return(list(chisq=chisq,p.value=P))#
}
head(fit)
getSlots("lexpit")
gof.pearson <- function(object){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
#
  Y <- object@y#
  prediction <- predict(object)#
  # UNIQUE COVARIATE GROUPS#
  if(class(object)[1]=="blm"){#
	  X <- model.matrix(object@formula, object@data)#
  }#
  else{#
  	X <- model.matrix(object@formula.linear, object@data)#
  	Z <- model.matrix(object@formula.expit, object@data)#
  	X <- cbind(X,Z)#
  }#
   X <-  paste(X,sep="")#
   X <- factor(X,lab=1:length(unique(X)))#
#
  #OBSERVED AND EXPTECTED#
  N <- tapply(Y*object@weights,X,length)#
  O <- tapply(Y,X,sum)#
  E <- tapply(prediction*object@weights,X,sum)#
  pi <- E/N#
  num <- (O-N*pi)^2#
  denom <- N*pi*(1-pi)#
#
  chisq = sum(num/denom)#
  P = 1 - pchisq(chisq, length(levels(X)) - 2)#
#
  return(list(E = E, O = O, chisq=chisq,p.value=P))#
}
data(ccdata)#
#
fit <- blm(y~female+I(packyear>30),data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)
summary(ccdata$packyear)
fit <- blm(y~female+I(packyear>20),data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)#
#
gof.pearson(fit)
fit
summary(ccdata)
length(fit@y)
length(fit@weights)
gof.pearson <- function(object){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
#
  Y <- object@y#
  prediction <- predict(object)#
  # UNIQUE COVARIATE GROUPS#
  if(class(object)[1]=="blm"){#
	  X <- model.matrix(object@formula, object@data)#
  }#
  else{#
  	X <- model.matrix(object@formula.linear, object@data)#
  	Z <- model.matrix(object@formula.expit, object@data)#
  	X <- cbind(X,Z)#
  }#
   X <-  paste(X,sep="")#
   X <- factor(X,lab=1:length(unique(X)))#
print(length(X))#
  #OBSERVED AND EXPTECTED#
  N <- tapply(Y*object@weights,X,length)#
  O <- tapply(Y,X,sum)#
  E <- tapply(prediction*object@weights,X,sum)#
  pi <- E/N#
  num <- (O-N*pi)^2#
  denom <- N*pi*(1-pi)#
#
  chisq = sum(num/denom)#
  P = 1 - pchisq(chisq, length(levels(X)) - 2)#
#
  return(list(E = E, O = O, chisq=chisq,p.value=P))#
}
gof.pearson(fit)
object <- fit
X <- model.matrix(object@formula, object@data)
nrow(X)
X <-  paste(X, sep="")
X[1:10]
length(X)
gof.pearson <- function(object){#
#
if(class(object)[1]!="lexpit"&class(object)[1]!="blm")#
		stop("Object must be an instance of a blm or lexpit model.")#
#
  Y <- object@y#
  prediction <- predict(object)#
  # UNIQUE COVARIATE GROUPS#
  if(class(object)[1]=="blm"){#
	  X <- model.matrix(object@formula, object@data)#
  }#
  else{#
  	X <- model.matrix(object@formula.linear, object@data)#
  	Z <- model.matrix(object@formula.expit, object@data)#
  	X <- cbind(X, Z)#
  }#
   X <-  apply(X, 1, function(x) paste(x, sep="", collapse=""))#
   X <- factor(X, lab=1:length(unique(X)))#
  N <- tapply(Y*object@weights, X, length)#
  O <- tapply(Y,X,sum)#
  E <- tapply(prediction*object@weights,X,sum)#
  pi <- E/N#
  num <- (O-N*pi)^2#
  denom <- N*pi*(1-pi)#
#
  chisq = sum(num/denom)#
  P = 1 - pchisq(chisq, length(levels(X)) - 2)#
#
  return(list(E = E, O = O, chisq=chisq,p.value=P))#
}
gof.pearson(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
		brks <- quantile(p,seq(0,1,length=11))#
		mid.brks <- (brks[-1]+brks[-11])/2 #
		fp <- cut(p,breaks=brks)#
		g <- (1:10)[fp]	#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
		brks <- quantile(p,seq(0,1,length=11))#
		mid.brks <- (brks[-1]+brks[-11])/2 #
		fp <- cut(p,breaks=brks)#
		g <- (1:10)[fp]#
		O <- tapply(object$y,g,sum)#
		E <- tapply(p*object$prior.weights,g,sum)#
	}#
	df <- data.frame(O=O,E=E)#
	row.names(df) <- mid.brks#
#
df#
}
data(ccdata)#
#
fit <- blm(y~female+packyear,data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(seq(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		df <- data.frame(O=O,E=E)#
		row.names(df) <- mid.brks#
  	 chisq = sum((O-E)^2/E)#
	 P = 1 - pchisq(chisq, df=8)#
list(table = df, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(seq(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		 result <- list(pre = mid.brks, O=O, E=E)#
    	 result$chisq  <- sum((O-E)^2/E)#
		 result$p.value <- 1 - pchisq(chisq, df=8)#
#
result#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(seq(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		 result <- list(pre = mid.brks, O=O, E=E)#
    	 result$chisq  <- sum((O-E)^2/E)#
		 result$p.value <- 1 - pchisq(result$chisq, df=8)#
#
result#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		 result <- list(pre = mid.brks, O=O, E=E)#
    	 result$chisq  <- sum((O-E)^2/E)#
		 result$p.value <- 1 - pchisq(result$chisq, df=8)#
#
result#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- list(O=O,E=E)#
		row.names(df) <- mid.brks#
  	 chisq = sum((O-E)^2/E)#
	 P = 1 - pchisq(chisq, df=8)#
list(table = df, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(O=O,E=E)#
		row.names(df) <- mid.brks#
  	 chisq = sum((O-E)^2/E)#
	 P = 1 - pchisq(chisq, df=8)#
list(table = df, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- cbind(O=O,E=E)#
		row.names(df) <- mid.brks#
  	 chisq = sum((O-E)^2/E)#
	 P = 1 - pchisq(chisq, df=8)#
list(table = df, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(O=O,E=E)#
		row.names(result) <- mid.brks#
  	 chisq = sum((O-E)^2/E)#
	 P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, median)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(pred = mid.brks, O=O,E=E)#
	    chisq = sum((O-E)^2/E)#
	    P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
gof(fit)
p <- predict(fit)
head(p)
head(ccdata)
ccdata$packyear <- ccdata$packyear+runif(nrow(ccdata))#
#
fit <- blm(y~female+packyear,data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)#
#
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- g[order(p)]#
		g <- factor(g)#
		mid.brks <- tapply(p, g, max)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(pred = mid.brks, O=O,E=E)#
	    chisq = sum((O-E)^2/E)#
	    P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
ccdata$packyear <- ccdata$packyear+runif(nrow(ccdata))#
#
fit <- blm(y~female+packyear,data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)#
#
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}	#
		g <- sort(rep(1:10,length=length(object@y)))#
		g <- factor(g)#
		g <- g[order(p)]#
		print(table(g))#
		mid.brks <- tapply(p, g, max)#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(pred = mid.brks, O=O,E=E)#
	    chisq = sum((O-E)^2/E)#
	    P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
ccdata$packyear <- ccdata$packyear+runif(nrow(ccdata))#
#
fit <- blm(y~female+packyear,data = ccdata,#
			weight = ccdata$w, strata = ccdata$strata)#
#
gof(fit)
p <- predict(p)
p <- predict(fit)
head(p)
o <- order(p)
head(o)
p[o][1:10]
quantile(p,seq(0,1,11))
quantile(p,seq(0,1,length=11))
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}	#
		g <- cut(p, seq(0, 1, length=11))#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(O=O,E=E)#
	    chisq = sum((O-E)^2/E)#
	    P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
gof(fit)
gof <- function(object){#
	if(class(object)[1]=="lexpit"|class(object)[1]=="blm"){#
		p <- predict(object)#
	}#
	else{#
		p <- expit(predict(object)) # LOGISTIC#
	}	#
		brks <- quantile(p, seq(0, 1, length=11))#
		g <- cut(p, br = brks, include.lowest = TRUE)#
		print(table(g, useNA="always"))#
		O <- tapply(object@y,g,sum)#
		E <- tapply(p*object@weights,g,sum)#
#
		result <- data.frame(O=O,E=E)#
	    chisq = sum((O-E)^2/E)#
	    P = 1 - pchisq(chisq, df=8)#
list(table = result, chisq = chisq, p.value = P)#
}
gof(fit)
names(ccdata)
args(blm)
args(lexpit)
q("no")
library(blm)
example(blm)
example(lexpit)
resid(fit)[1:10]
library(blm)
example(blm)
head(blm@dbeta)
head(fit@dbeta)
example(lexpit)
head(fit@dbeta[[1]])
names(fit@dbeta)
library(blm)
example(blm)
head(fit@dbeta)
example(lexpit)
library(blm)
example(blm)
head(fit@dbeta)
example(lexpit)
head(fit@dbeta$linear)
head(fit@dbeta$expit)
is.matrix(fit@dbeta$expit)
m <- matrix(1:6,2,3)
m
m[,1] <- NULL
m[,3]
cbind(m[,3])
cbind(m[,2:3])
q("no")
library(blm)
?dbeta
library(blm)
example(dBeta)
fit <- blm(y~female+packyear, data = ccdata,#
       			weight = ccdata$w, strata = ccdata$strata)
plot(y=fit(dBeta(fit)[,1]),x=1:nrow(fit),type="h")
plot(y=fit(dBeta(fit)[,1]),x=1:nrow(ccdata),type="h")
plot(y=dBeta(fit)[,1],x=1:nrow(ccdata),type="h")
plot(y=dBeta(fit)[,2],x=1:nrow(ccdata),type="h")
head(ccdata)
subset(ccdata, y ==1)
head(ccdata)
temp <- data.frame(female = 1, packyear = 50, strata = 1, y = 1, w = 1)
ccdata <- rbind(temp, ccdata)
fit <- blm(y~female+packyear, data = ccdata,#
       			weight = ccdata$w, strata = ccdata$strata)
inf <- apply(dBeta(fit), 1, function(x) sum(x^2))
plot(y=inf, x = 1:nrow(ccdata), type = "h")
inf[1]
inf[2]
plot(y=dBeta(fit)[,2], x = 1:nrow(ccdata), type = "h")
dBeta(fit)[1:5,2]
max(dBeta(fit)[,2])
plot(y=scale(dBeta(fit)[,2]), x = 1:nrow(ccdata), type = "h")
args(lexpit)
names(ccdata)
library(blm)#
#
data(ccdata)#
#
names(ccdata)#
#
table(ccdata$y)
fit <- blm(y~female+packyear, data = ccdata,#
             weight = ccdata$w, strata = ccdata$strata)
confint(fit)#
confint(fit, parm="female")
confint
library(blm)
data(ccdata)
fit <- blm(y~female+packyear, data = ccdata,#
             weight = ccdata$w, strata = ccdata$strata)
confint(fit)#
confint(fit, parm="female")
confint
showMethods("confint")
showMethods("confint",classes="blm")
library(blm)
data(ccdata)
fit <- blm(y~female+packyear, data = ccdata,#
             weight = ccdata$w, strata = ccdata$strata)
confint(fit)#
confint(fit, parm="female")
confint(fit)#
confint(fit, parm=c("packyear","female"))
confint(fit)
setwd("~/master/code/blm/inst/doc")
Sweave("blm.Rnw")
Sweave("blm.Rnw")
?symbols
f <- function(test) deparse(substitute(test))
f(x)
datasets <- function(data){#
#
  # LOAD USING DEFALUT LOCATON#
  name <- deparse(substitute(data))#
  filename <- file.path("~/master/datasets/",name,".RData")#
  print(filename)#
#do.call(load,list(file=filename))#
}
dataset(eagle)
datasets(eagle)
q("no")
